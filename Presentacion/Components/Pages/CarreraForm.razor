@page "/carreras/form"
@page "/carreras/form/{Id:int}"
@using Entidades
@using ProyectoDeCero2.Servicios
@using Servicios;
@inject ICarreraServicios CarreraServicios
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10">
            <div class="card shadow-sm border-0">
                <div class="card-header bg-primary text-white py-3">
                    <h4 class="mb-0">
                        <i class="fas fa-graduation-cap me-2"></i>
                        @(carrera.IdCarrera == 0 ? "Crear Nueva Carrera" : "Editar Carrera")
                    </h4>
                </div>

                <div class="card-body p-4">
                    <EditForm Model="@carrera" OnValidSubmit="GuardarCarrera">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputText id="clave" class="form-control" placeholder="Clave" @bind-Value="carrera.ClaveCarrera" />
                                    <label for="clave" class="form-label">Clave de Carrera</label>
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputText id="nombre" class="form-control" placeholder="Nombre" @bind-Value="carrera.NombreCarrera" />
                                    <label for="nombre" class="form-label">Nombre de Carrera</label>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputText id="alias" class="form-control" placeholder="Alias" @bind-Value="carrera.AliasCarrera" />
                                    <label for="alias" class="form-label">Alias de Carrera</label>
                                </div>
                            </div>

                            <div class="col-md-6 mb-3">
                                <div class="form-floating">
                                    <InputNumber id="coordinador" class="form-control" placeholder="Coordinador" @bind-Value="carrera.IdCoordinador" />
                                    <label for="coordinador" class="form-label">ID Coordinador</label>
                                </div>
                            </div>
                        </div>

                        <div class="mb-4">
                            <div class="form-check form-switch">
                                <InputCheckbox id="estado" class="form-check-input" @bind-Value="carrera.EstadoCarrera" />
                                <label class="form-check-label fw-medium" for="estado">Carrera Activa</label>
                            </div>
                        </div>

                        <div class="d-flex gap-2 justify-content-end pt-3 border-top">
                            <button type="button" class="btn btn-outline-secondary" @onclick="Cancelar">
                                <i class="fas fa-times me-1"></i> Cancelar
                            </button>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save me-1"></i> Guardar
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private E_Carrera carrera = new E_Carrera();

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            carrera = await CarreraServicios.ObtenerCarreraPorIdAsync(Id);
        }
    }

    private async Task GuardarCarrera()
    {
        await CarreraServicios.GuardarCarreraAsync(carrera);
        NavigationManager.NavigateTo("/carreras");
    }

    private void Cancelar()
    {
        NavigationManager.NavigateTo("/carreras");
    }
}