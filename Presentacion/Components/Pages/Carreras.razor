@page "/carreras"
@using Entidades
@using ProyectoDeCero2.Servicios
@inject ICarreraServicios CarreraServicios
@inject IPlanEstudioServicios PlanEstudioServicios
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<h3>Gestión de Carreras y Planes de Estudio</h3>

<p>
    <input type="text" placeholder="Buscar por nombre o clave" @bind="busqueda" @bind:event="oninput" />
    <button class="btn btn-primary" @onclick="BuscarCarreras">Buscar</button>
    <button class="btn btn-success" @onclick="CrearCarrera">Crear Nueva Carrera</button>
</p>

@if (carreras == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Clave</th>
                <th>Nombre de Carrera</th>
                <th>Alias</th>
                <th>Estado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var carrera in carreras)
            {
                <tr>
                    <td>@carrera.ClaveCarrera</td>
                    <td>@carrera.NombreCarrera</td>
                    <td>@carrera.AliasCarrera</td>
                    <td>@(carrera.EstadoCarrera ? "Activa" : "Inactiva")</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => ToggleRow(carrera.IdCarrera)">
                            @(filaExpandida.ContainsKey(carrera.IdCarrera) && filaExpandida[carrera.IdCarrera] ? "Ocultar Planes" : "Ver Planes")
                        </button>
                        <button class="btn btn-primary" @onclick="() => EditarCarrera(carrera.IdCarrera)">Editar</button>
                        <button class="btn btn-danger" @onclick="() => EliminarCarrera(carrera.IdCarrera)">Eliminar</button>
                    </td>
                </tr>
                if (filaExpandida.ContainsKey(carrera.IdCarrera) && filaExpandida[carrera.IdCarrera])
                {
                    <tr>
                        <td colspan="5">
                            <h5 class="mt-3">Planes de Estudio</h5>
                            <button class="btn btn-success btn-sm mb-3" @onclick="() => AgregarPlanDeEstudio(carrera.IdCarrera)">Agregar Plan</button>
                            @if (planesCargados.ContainsKey(carrera.IdCarrera) && planesCargados[carrera.IdCarrera] != null)
                            {
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Nombre del Plan</th>
                                            <th>Créditos Totales</th>
                                            <th>Estado</th>
                                            <th>Acciones del Plan</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (!planesCargados[carrera.IdCarrera].Any())
                                        {
                                            <tr>
                                                <td colspan="4">No hay planes de estudio para esta carrera.</td>
                                            </tr>
                                        }
                                        else
                                        {
                                            @foreach (var plan in planesCargados[carrera.IdCarrera])
                                            {
                                                <tr>
                                                    <td>@plan.PlanEstudio</td>
                                                    <td>@plan.TotalCreditos</td>
                                                    <td>@(plan.EstadoPlanEstudio ? "Activo" : "Inactivo")</td>
                                                    <td>
                                                        <button class="btn btn-primary btn-sm" @onclick="() => EditarPlanDeEstudio(plan.IdPlanEstudio)">Editar</button>
                                                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarPlanDeEstudio(plan.IdPlanEstudio)">Eliminar</button>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <p><em>Cargando planes de estudio...</em></p>
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private List<E_Carrera> carreras;
    private string busqueda = string.Empty;
    private Dictionary<int, bool> filaExpandida = new Dictionary<int, bool>();
    private Dictionary<int, List<E_PlanEstudio>> planesCargados = new Dictionary<int, List<E_PlanEstudio>>();

    protected override async Task OnInitializedAsync()
    {
        await ObtenerTodasLasCarreras();
    }

    private async Task ObtenerTodasLasCarreras()
    {
        try
        {
            carreras = await CarreraServicios.ObtenerTodasLasCarrerasAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener las carreras: {ex.Message}");
        }
    }

    private async Task BuscarCarreras()
    {
        carreras = await CarreraServicios.BuscarCarrerasAsync(busqueda);
        filaExpandida.Clear();
        planesCargados.Clear();
    }

    private void CrearCarrera()
    {
        NavigationManager.NavigateTo("/carreras/form");
    }

    private void EditarCarrera(int idCarrera)
    {
        NavigationManager.NavigateTo($"/carreras/form/{idCarrera}");
    }

    private async Task EliminarCarrera(int idCarrera)
    {
        var confirmacion = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar esta carrera?");
        if (confirmacion)
        {
            await CarreraServicios.EliminarCarreraAsync(idCarrera);
            await ObtenerTodasLasCarreras();
        }
    }

    private void AgregarPlanDeEstudio(int idCarrera)
    {
        NavigationManager.NavigateTo($"/planes/form/{idCarrera}");
    }

    private void EditarPlanDeEstudio(int idPlanEstudio)
    {
        NavigationManager.NavigateTo($"/planes/form/{idPlanEstudio}");
    }

    private async Task EliminarPlanDeEstudio(int idPlanEstudio)
    {
        var confirmacion = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar este plan de estudio?");
        if (confirmacion)
        {
            await PlanEstudioServicios.EliminarPlanAsync(idPlanEstudio);
            await ObtenerTodosLosPlanesDeCarrera(filaExpandida.FirstOrDefault(x => x.Value).Key);
        }
    }

    private async Task ToggleRow(int idCarrera)
    {
        if (filaExpandida.ContainsKey(idCarrera) && filaExpandida[idCarrera])
        {
            // Ocultar la fila
            filaExpandida[idCarrera] = false;
        }
        else
        {
            // Ocultar todas las otras filas y mostrar solo la seleccionada
            filaExpandida.Clear();
            planesCargados.Clear();
            filaExpandida[idCarrera] = true;

            // Cargar los planes de estudio
            await ObtenerTodosLosPlanesDeCarrera(idCarrera);
        }
    }

    private async Task ObtenerTodosLosPlanesDeCarrera(int idCarrera)
    {
        try
        {
            var planes = await PlanEstudioServicios.ObtenerPlanesPorCarreraAsync(idCarrera);
            planesCargados[idCarrera] = planes;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener planes para la carrera {idCarrera}: {ex.Message}");
        }
    }
}