@page "/carreras"
@using Entidades
@using ProyectoDeCero2.Servicios
@inject ICarreraServicios CarreraServicios
@inject IPlanEstudioServicios PlanEstudioServicios
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject NavigationManager NavManager

<h3 class="mt-4 mb-4 fw-bold">Gestión de Carreras</h3>

<div class="d-flex align-items-center">
    <input type="text"
           class="form-control me-2"
           style="max-width: 300px;"
           placeholder="Buscar por nombre o clave"
           @bind="busqueda"
           @bind:event="oninput" />

    <button class="btn btn-primary me-2" @onclick="BuscarCarreras">
        Buscar
    </button>

    <button class="btn btn-success" @onclick="CrearCarrera">
        Crear Nueva Carrera
    </button>

    <button class="btn btn-secondary ms-2" @onclick="IrAHome">
        Ir a Inicio
    </button>

</div>




@if (carreras == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Clave</th>
                <th>Nombre de Carrera</th>
                <th>Alias</th>
                <th>Estado</th>
                <th style="width: 250px;">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var carrera in carreras)
            {
                <tr>
                    <td>@carrera.ClaveCarrera</td>
                    <td>@carrera.NombreCarrera</td>
                    <td>@carrera.AliasCarrera</td>
                    <td>
                        <span class="badge @(carrera.EstadoCarrera ? "text-bg-success" : "text-bg-secondary")">
                            @(carrera.EstadoCarrera ? "Activa" : "Inactiva")
                        </span>
                    </td>
                    <td>
                        <button class="btn btn-info btn-sm me-1" @onclick="() => ToggleRow(carrera.IdCarrera)">
                            <i class="fas fa-chevron-down"></i> @(filaExpandida.ContainsKey(carrera.IdCarrera) && filaExpandida[carrera.IdCarrera] ? "Ocultar" : "Ver Planes")
                        </button>
                        <button class="btn btn-primary btn-sm me-1" @onclick="() => EditarCarrera(carrera.IdCarrera)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarCarrera(carrera.IdCarrera)">
                            <i class="fas fa-trash-alt"></i> X
                        </button>
                    </td>
                </tr>
                
                @if (filaExpandida.ContainsKey(carrera.IdCarrera) && filaExpandida[carrera.IdCarrera])
                {
                    <tr>
                        <td colspan="5">
                            <div class="p-3 bg-light border rounded">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h5 class="mb-0">Planes de Estudio Asignados</h5>
                                    
                                    <button class="btn btn-info btn-sm" @onclick="() => GestionarPlanes(carrera.IdCarrera)">
                                        <i class="fas fa-tasks"></i> Administrar Planes
                                    </button>
                                </div>
                                
                                @if (carrera.PlanesDeEstudio != null && carrera.PlanesDeEstudio.Any())
                                {
                                    <table class="table table-bordered table-sm mb-0">
                                        <thead class="table-dark">
                                            <tr>
                                                <th>Nombre del Plan</th>
                                                <th>Créditos Totales</th>
                                                <th>Estado</th>
                                                <th>Acciones del Plan</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var plan in carrera.PlanesDeEstudio)
                                            {
                                                <tr>
                                                    <td>@plan.PlanEstudio</td>
                                                    <td>@plan.TotalCreditos</td>
                                                    <td>@(plan.EstadoPlanEstudio ? "Activo" : "Inactivo")</td>
                                                    <td>
                                                        <button class="btn btn-primary btn-sm" @onclick="() => EditarPlanDeEstudio(plan.IdPlanEstudio)">Editar</button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <p class="text-center text-muted mb-0">No hay planes de estudio asignados a esta carrera.</p>
                                }
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}



@code {
    private List<E_Carrera> carreras;
    private string busqueda = string.Empty;
    private Dictionary<int, bool> filaExpandida = new Dictionary<int, bool>();

    // La variable 'planesCargados' ya no es necesaria.

    protected override async Task OnInitializedAsync()
    {
        await ObtenerTodasLasCarreras();
    }

    private async Task ObtenerTodasLasCarreras()
    {
        carreras = await CarreraServicios.ObtenerTodasLasCarrerasAsync();
        // Limpiamos el estado de las filas expandidas al recargar
        filaExpandida.Clear();
    }

    private async Task BuscarCarreras()
    {
        carreras = await CarreraServicios.BuscarCarrerasAsync(busqueda);
        filaExpandida.Clear();
    }

    private void CrearCarrera()
    {
        NavigationManager.NavigateTo("/carreras/form");
    }

    private void EditarCarrera(int idCarrera)
    {
        NavigationManager.NavigateTo($"/carreras/form/{idCarrera}");
    }

    private async Task EliminarCarrera(int idCarrera)
    {
        var confirmacion = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar esta carrera?");
        if (confirmacion)
        {
            await CarreraServicios.EliminarCarreraAsync(idCarrera);
            await ObtenerTodasLasCarreras(); // Recarga toda la lista para mantener la consistencia
        }
    }

    // --- NUEVO MÉTODO PARA NAVEGAR A LA PÁGINA DE GESTIÓN ---
    private void GestionarPlanes(int idCarrera)
    {
        NavigationManager.NavigateTo($"/carreras/{idCarrera}/gestionar-planes");
    }

    private void EditarPlanDeEstudio(int idPlanEstudio)
    {
        NavigationManager.NavigateTo($"/planes/form/{idPlanEstudio}");
    }

    private async Task EliminarPlanDeEstudio(int idPlanEstudio)
    {
        var confirmacion = await JSRuntime.InvokeAsync<bool>("confirm", "Esto eliminará el plan de estudio DE FORMA PERMANENTE para TODAS las carreras. ¿Estás seguro?");
        if (confirmacion)
        {
            await PlanEstudioServicios.EliminarPlanAsync(idPlanEstudio);
            await ObtenerTodasLasCarreras();
        }
    }


    private void ToggleRow(int idCarrera)
    {

        if (filaExpandida.TryGetValue(idCarrera, out bool isExpanded) && isExpanded)
        {
            filaExpandida[idCarrera] = false;
        }
        else
        {
            filaExpandida[idCarrera] = true;
        }
    }

    private void IrAHome()

    {

        NavManager.NavigateTo("/");

    }

}